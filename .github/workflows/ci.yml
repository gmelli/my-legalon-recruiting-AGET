name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Run linting
      run: |
        pip install ruff
        ruff check . || true  # Non-blocking for now

    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Test installer script
      run: |
        # Test the installer works
        bash install.sh /tmp/test-install minimal --dry-run

    - name: Test patterns
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python scripts/validate_patterns.py || true  # Non-blocking if script doesn't exist yet

    - name: Documentation check
      run: |
        python scripts/housekeeping_protocol.py documentation-check || true

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Run security checks
      run: |
        # Check for secrets
        if grep -r "api_key\|secret\|password\|token" . --include="*.py" --exclude-dir=tests --exclude-dir=.git; then
          echo "Warning: Potential secrets found"
        fi

        # Check for common security issues
        pip install bandit
        bandit -r . -ll || true  # Non-blocking